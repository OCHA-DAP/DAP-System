Note: Additional information about getting set up can be found on the project wiki: 
https://github.com/OCHA-DAP/ProjectWiki/wiki/Development-Environment-and-Workflow

### 1. Getting the sources, installing the required software ###
	Sign up to GitHub (and ask to be added to the appropriate projects)

	Install Java 7 JDK

	Install Postgres : http://www.postgresql.org/download/

	Install maven

	Install Eclipse (latest version. Tested with Kepler JEE edition)
		With this edition, plugins for maven and for Git are already bundled.
		With other editions, it might be useful to install these plugins
		Create an Eclipse workspace
		
	Set up Git.  Alternatively, you could install the Github Windows Client, which has a nice git powershell command line tool.
	However, we don't recommend using the the Github GUI client or EGit (for Eclipse) for any change-inducing git commands 
	since we have had some problems with those tools.
    Don't clone your repo into the same folder as the Eclipse workspace: http://wiki.eclipse.org/EGit/User_Guide#Considerations_for_Git_Repositories_to_be_used_in_Eclipse
	
	After cloning, import the Project in Eclipse ("from existing projects in the workspace" works fine if 
	you aren't using eGit and have already cloned the repo to your local drive).  Be careful NOT to use the "copy projects to workspace" option.

	Setup the env variable
		"HDX_FOLDER" this is the path of the folder where DAP can use the file system
			example :  export HDX_FOLDER=/opt/ocha/dap
		it must contain 3 folders
			config : where we place the configuration files of the DAP app
			logs : where DAP will write the logs
			staging : where DAP can temporarily or permanently store some file for processing, validation etc ...
		
	additional configuration
		The app needs 2 config files(dap-config, dap-secret), to be deployed in dap config folder
		Samples of these files can be found in resources/config_sample

### 2. Checks to perform ### 
	run mvn clean install from the project directory (where pom.xml is), should be a success
	run the Unit Tests from Eclipse
	
### 3. Build the artifact (the war) ###
	This is a maven project. The build command is "mvn clean install"
	
	If the db schema changes, it can be generated using the command : mvn clean process-classes -Pddl
	(The file will be generated in target/hibernate3/sql/schema.ddl and should replace the one in DAP-System/resources/db
	The incremental update has to be made manually
	
### 4. preparing an environment for deployement ###
	Tomcat : we need to setup a tomcat instance where to deploy the war
		tomcat needs an additional jar : postgres jdbc driver
		(currently, version 9.3-1100)
		should go in lib folder of tomcat (for tomcat7)
		
	Postgres : 
		To prepare the environment, 3 SQL scripts are needed (TODO, a sys-admin will probably want to decide which user should run these scripts)

		1 - db.sql (prepares the db) 
		2 - schema.sql (schema.ddl if generated from maven) (prepares the data model) (remove the alter and drop statements for an initial setup)
		3 - sample.sql (optional, setting up some users)
		****NOTE: The tables and relations must be owned by user "dap-user".  This can be done by editing each one after creation, or by switching to dap-user before running schema.sql.****

		It is recommended (required for a production deployment!) to change the default password for dap-user and enter this password in %HDX_FOLDER%/config/dap-config.
		
	If not already done, setup the environment variable
		"HDX_FOLDER" must be defined, like on the dev machine (see step 1) (and the 3 folders config, logs and staging created)
		
### 5. optional, setup of a VPN access to emergency.lu hosting for DAP ###
	in a web browser, go to https://sslvpn.emergency.lu to download the Cisco anyConnect VPN Client
	You will need your account credentials
	dap-dev.service.emergency.lu is only accessible with VPN and allows several services (ssh etc....)
	dap-dev.emergency.lu is public, allows access to the tomcat server
	
	urls to connect : 
		http://ckan.megginson.com/
		http://dap-dev.emergency.lu:8080/manager/html
		http://dap-dev.emergency.lu:8080/dap-1.0.0/admin/status/datasets/
